# 题目描述
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

# 解法
两层遍历
第一层是完整的字符串
第二层是前一个不重复子串的第二个字母
用map存储子串 判断有没有重复元素

# 代码
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        max = 0
        for ia in range(len(s)):
            m = {}
            for ib, v in enumerate(s[ia:]):
                if v in m:
                    break
                else:
                    m[v] = ib
                if max < len(m):
                    max = len(m)
        return max
